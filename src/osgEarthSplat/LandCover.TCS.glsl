#version 400

/**
 * TCS that distributes data based on a Land Use code sampler.
 */
 
#pragma vp_name       LandCover tessellation control shader
#pragma vp_entryPoint oe_landcover_configureTess
#pragma vp_location   tess_control

layout(vertices=3) out;

uniform float oe_landcover_density;

#if 1

// MAIN ENTRY POINT                
void oe_landcover_configureTess()
{
	if (gl_InvocationID == 0)
	{
        float d = oe_landcover_density;

        gl_TessLevelOuter[0] = d;
        gl_TessLevelOuter[1] = d;
        gl_TessLevelOuter[2] = d;
        gl_TessLevelInner[0] = d;
	}
}

#else

// NOTE:
// For this to work, the oe_landcover_getBiomeIndex() function must
// be bound to this shader stage - see LandCoverTerrainEffect.cpp

// stage global: tile coordinates
vec4 oe_layer_tilec;

// declare the coverage acceptance function, generated by LandCoverBiome
int oe_landcover_getBiomeIndex(in vec4 coords);
flat out int oe_landcover_biomeIndex;

// MAIN ENTRY POINT                
void oe_landcover_configureTess()
{
	if (gl_InvocationID == 0)
	{
        float d = 0.0;

        oe_landcover_biomeIndex = oe_landcover_getBiomeIndex(oe_layer_tilec);
        if ( oe_landcover_biomeIndex >= 0 )
        {
            d = oe_landcover_density;
        }

        gl_TessLevelOuter[0] = d;
        gl_TessLevelOuter[1] = d;
        gl_TessLevelOuter[2] = d;
        gl_TessLevelInner[0] = d;
	}
}

#endif