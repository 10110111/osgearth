/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_SPLAT_ROAD_HF_TILE_SOURCE
#define OSGEARTH_SPLAT_ROAD_HF_TILE_SOURCE 1

#include <osgEarth/TileSource>
#include <osgEarth/ElevationLayer>
#include <osgEarth/ElevationPool>
#include <osgEarthFeatures/FeatureSource>
#include <osgDB/FileNameUtils>
#include "Export"

namespace osgEarth { namespace Splat
{
    using namespace osgEarth;
    using namespace osgEarth::Features;

    /**
     * Tile source that will read from ANOTHER tile source and perform
     * various pre-processing syntheses operations like warping and detailing.
     */
    class OSGEARTHSPLAT_EXPORT FlatteningTileSource : public osgEarth::TileSource
    {
    public:
        FlatteningTileSource();

        void setElevationPool(ElevationPool* pool) { _pool = pool; }

        void setInnerWidth(double width) { _innerWidth = width; }

        void setOuterWidth(double width) { _outerWidth = width; }

        void setFeatureSource(FeatureSource* fs) { _featureSource = fs; }


    public: // TileSource

        Status initialize(const osgDB::Options* readOptions);

        osg::HeightField* createHeightField(const TileKey& key, ProgressCallback* progress);

    protected:
        virtual ~FlatteningTileSource() { }

        osg::ref_ptr<osgDB::Options> _readOptions;
        osg::ref_ptr<FeatureSource>  _featureSource;
        double _innerWidth;
        double _outerWidth;

        ElevationPool* _pool;
    };


    class OSGEARTHSPLAT_EXPORT FlatteningLayerOptions : public ElevationLayerOptions
    {
    public:
        FlatteningLayerOptions(const ConfigOptions& co = ConfigOptions()) :
            ElevationLayerOptions(co)
        {
            mergeConfig(_conf);
        }
        
        optional<std::string>& elevationBaseLayer() { return _elevationBaseLayer; }
        const optional<std::string>& elevationBaseLayer() const { return _elevationBaseLayer; }

        optional<FeatureSourceOptions>& featureSourceOptions() { return _featureSourceOptions; }
        const optional<FeatureSourceOptions>& featureSourceOptions() const { return _featureSourceOptions; }

        optional<double>& innerWidth() { return _innerWidth; }
        const optional<double>& innerWidth() const { return _innerWidth; }

        optional<double>& outerWidth() { return _outerWidth; }
        const optional<double>& outerWidth() const { return _outerWidth; }

    public:
        Config getConfig() const
        {
            Config conf;
            //conf.addObjIfSet("elevation", _elevationLayerOptions);
            conf.addObjIfSet("features",  _featureSourceOptions);
            conf.addIfSet("inner_width", _innerWidth);
            conf.addIfSet("outer_width", _outerWidth);
            conf.addIfSet("base_layer", _elevationBaseLayer);
            return conf;
        }

    protected:
        void mergeConfig( const Config& conf )
        {
            //conf.getObjIfSet("elevation", _elevationLayerOptions);
            conf.getObjIfSet("features",  _featureSourceOptions);
            conf.getIfSet("inner_width", _innerWidth);
            conf.getIfSet("outer_width", _outerWidth);
            conf.getIfSet("base_layer", _elevationBaseLayer);
        }
        
    private:
        //optional<ElevationLayerOptions> _elevationLayerOptions;
        optional<FeatureSourceOptions>  _featureSourceOptions;
        optional<double> _innerWidth;
        optional<double> _outerWidth;
        optional<std::string> _elevationBaseLayer;
    };


    class OSGEARTHSPLAT_EXPORT FlatteningLayer : public ElevationLayer
    {
    public:
        FlatteningLayer();
        FlatteningLayer(const FlatteningLayerOptions& options);

        const FlatteningLayerOptions& getFlatteningLayerOptions() const { return *_localOptions; }

        // the elevation layer that we want to flatten
        void setBaseLayer(ElevationLayer* layer);

    public: // ElevationLayer

        virtual const Status& open();

    protected: // ElevationLayer

        // called by the elevation layer to create our custom tile source
        virtual TileSource* createTileSource();

        // called by the map when this layer is added/removed
        virtual void addedToMap(const class Map*);
        virtual void removedFromMap(const class Map*);

    protected:
        void init();        
        virtual ~FlatteningLayer();

    private:
        FlatteningLayerOptions* _localOptions;
        FlatteningLayerOptions  _localOptionsConcrete;
        FlatteningLayerOptions& mutableOptions() { return *_localOptions; }
        const FlatteningLayerOptions& options() const { return *_localOptions; }

        MapCallback* _mapCallback;
        FlatteningTileSource* _ts;
        ElevationPool _pool;
        osg::ref_ptr<FeatureSource> _featureSource;
    };

    REGISTER_OSGEARTH_LAYER(flattened_elevation, FlatteningLayer);

} } // namespace osgEarth::Splat

#endif // OSGEARTH_SPLAT_ROAD_HF_TILE_SOURCE
