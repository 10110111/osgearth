/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2018 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_ELEVATION_TERRAIN_LAYER_H
#define OSGEARTH_ELEVATION_TERRAIN_LAYER_H 1

#include <osgEarth/TerrainLayer>
#include <osg/MixinVector>

namespace osgEarth
{
    /**
     * Initialization and serialization options for an elevation layer.
     */
    class OSGEARTH_EXPORT ElevationLayerOptions : public TerrainLayerOptions
    {
    public:
        META_LayerOptions(osgEarth, ElevationLayerOptions, TerrainLayerOptions);

    public:
        /**
         * Gets the explicity vertical datum identifier that will override a vertical
         * datum specified by the tile source.
         */
        optional<std::string>& verticalDatum() { return _vertDatum; }
        const optional<std::string>& verticalDatum() const { return _vertDatum; }

        optional<bool>& offset() { return _offset; }
        const optional<bool>& offset() const { return _offset; }

        /** Policy for dealing with NO_DATA values in elevation */
        optional<ElevationNoDataPolicy>& noDataPolicy() { return _noDataPolicy; }
        const optional<ElevationNoDataPolicy>& noDataPolicy() const { return _noDataPolicy; }

    public:
        virtual Config getConfig() const;
        
    private:
        void fromConfig( const Config& conf );

        optional<bool> _offset;
        optional<ElevationNoDataPolicy> _noDataPolicy;
        optional<std::string> _vertDatum;
    };
}
OSGEARTH_SPECIALIZE_CONFIG(osgEarth::ElevationLayerOptions);
    

namespace osgEarth
{
    struct ElevationLayerCallback : public TerrainLayerCallback
    {
        //EMPTY
        typedef void (ElevationLayerCallback::*MethodPtr)(class ElevationLayer*);
    };

    /**
     * A map terrain layer containing elevation grid heightfields.
     */
    class OSGEARTH_EXPORT ElevationLayer : public TerrainLayer
    {
    public:
        META_Layer(osgEarth, ElevationLayer, ElevationLayerOptions, TerrainLayer, elevation);        //!
        
        //! Vertical data identifier (options)
        void setVerticalDatum(const std::string& value) { options().verticalDatum() = value; }
        const std::string& getVerticalDatum() const { return options().verticalDatum().get(); }

        //! Whether this layer contains offsets instead of absolute elevation heights
        void setOffset(bool value) { options().offset() = value; }

    public: // methods
        
        /**
         * Creates a GeoHeightField for this layer that corresponds to the extents and LOD 
         * in the specified TileKey. The returned HeightField will always match the geospatial
         * extents of that TileKey.
         *
         * @param key TileKey for which to create a heightfield.
         */
        GeoHeightField createHeightField(const TileKey& key);

        /**
         * Creates a GeoHeightField for this layer that corresponds to the extents and LOD 
         * in the specified TileKey. The returned HeightField will always match the geospatial
         * extents of that TileKey.
         *
         * @param key TileKey for which to create a heightfield.
         * @param progress Callback for tracking progress and cancelation
         */
        GeoHeightField createHeightField(const TileKey& key, ProgressCallback* progress);

        /**
         * Whether this layer contains offsets instead of absolute heights
         */
        bool isOffset() const;

    protected: // Layer

        virtual void init();

    protected: // ElevationLayer

        //! Override aspects of the layer Profile as needed
        virtual void applyProfileOverrides();

        //! Subclass can override this by calling setTileSourceExpected(false).
        //! @param[in ] key TileKey for which to create heightfield
        //! @param[in ] progress Progress reporting callack
        virtual GeoHeightField createHeightFieldImplementation(
            const TileKey& key, 
            ProgressCallback* progress) const;
        
        virtual ~ElevationLayer() { }
        
    private:

        TileSource::HeightFieldOperation* getOrCreatePreCacheOp() const;
        mutable Threading::Mutex _mutex;
        mutable osg::ref_ptr<TileSource::HeightFieldOperation> _preCacheOp;
        
        // creates a geoHF directly from the tile source
        osg::HeightField* createHeightFieldFromTileSource( 
            const TileKey& key, 
            ProgressCallback* progress) const;

        void assembleHeightField(
            const TileKey& key,
            osg::ref_ptr<osg::HeightField>& out_hf,
            osg::ref_ptr<NormalMap>& out_normalMap,
            ProgressCallback* progress) const;
    };


    /**
     * Vector of elevation layers, with added methods.
     */
    class OSGEARTH_EXPORT ElevationLayerVector : public osg::MixinVector< osg::ref_ptr<ElevationLayer> >
    {
    public:
        /**
         * Populates an existing height field (hf must already exist) with height
         * values from the elevation layers.
         */
        bool populateHeightFieldAndNormalMap(
            osg::HeightField*      hf,
            NormalMap*             normalMap,
            const TileKey&         key,
            const Profile*         haeProfile,
            RasterInterpolation interpolation,
            ProgressCallback*      progress ) const;

    public:
        /** Default ctor */
        ElevationLayerVector();

        /** Copy ctor */
        ElevationLayerVector(const ElevationLayerVector& rhs);
    };

} // namespace osgEarth

#endif // OSGEARTH_ELEVATION_TERRAIN_LAYER_H
