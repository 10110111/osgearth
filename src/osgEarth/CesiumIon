/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2018 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_CESIUMION_H
#define OSGEARTH_CESIUMION_H

#include <osgEarth/Common>
#include <osgEarth/ImageLayer>
#include <osgEarth/URI>


namespace osgEarth { namespace CesiumIon
{
    /**
     * Underlying driver that does the actual I/O
     */
    class OSGEARTH_EXPORT Driver
    {
    public:
        Status open(
            const URI& server,
            const std::string& format,
            const std::string& assedId,
            const std::string& token,
            osg::ref_ptr<const Profile>& profile,
            const osgDB::Options* readOptions);

        ReadResult read(
            const URI& uri,
            const TileKey& key, 
            ProgressCallback* progress,
            const osgDB::Options* readOptions) const;

    protected:
        std::string _acceptHeader;
        std::string _resourceToken;
        std::string _resourceUrl;
        std::string _format;
    };
} }


namespace osgEarth
{
    class OSGEARTH_EXPORT CesiumIonImageLayerOptions : public ImageLayerOptions
    {
    public:
        META_LayerOptions(osgEarth, CesiumIonImageLayerOptions, ImageLayerOptions);
        
        optional<URI>& server() { return _server; }
        const optional<URI>& server() const { return _server; }

        optional<std::string>& format() { return _format; }
        const optional<std::string>& format() const { return _format; }

        optional<std::string>& assetId() { return _assetId; }
        const optional<std::string>& assetId() const { return _assetId; }

        optional<std::string>& token() { return _token; }
        const optional<std::string>& token() const { return _token; }

    public:
        static Config getMetadata();
        virtual Config getConfig() const;

    private:
        void fromConfig(const Config& conf);
        optional<URI>         _server;
        optional<std::string> _format;
        optional<std::string> _assetId;
        optional<std::string> _token;
    };
}
OSGEARTH_SPECIALIZE_CONFIG(osgEarth::CesiumIonImageLayerOptions);


namespace osgEarth
{
    /**
     * Image layer connectin to a Cesium ION server.
     */
    class OSGEARTH_EXPORT CesiumIonImageLayer : public ImageLayer
    {
    public:
        META_Layer(
            osgEarth, 
            CesiumIonImageLayer,
            CesiumIonImageLayerOptions,
            ImageLayer,
            xyzimage);

    public:
        //! Base URL for requests
        void setServer(const URI& value) { options().server() = value; }
        const URI& getServer() const { return options().server().get(); }

        //! Data format to request from the service
        void setFormat(const std::string& value) { options().format() = value; }
        const std::string& getFormat() const { return options().format().get(); }

        //! Asset identifier
        void setAssetId(const std::string& value) { options().assetId() = value; }
        const std::string& getAssetId() const { return options().assetId().get(); }

        //! Auth token
        void setToken(const std::string& value) { options().token() = value; }
        const std::string& getToken() const { return options().token().get(); }

    public: // Layer
        
        //! Establishes a connection to the TMS repository
        virtual const Status& open();

        //! Creates a raster image for the given tile key
        virtual GeoImage createImageImplementation(const TileKey& key, ProgressCallback* progress) const;

    protected: // Layer

        //! Called by constructors
        virtual void init();

    protected:

        //! Destructor
        virtual ~CesiumIonImageLayer() { }

    private:
        CesiumIon::Driver _driver;
    };

} // namespace osgEarth

#endif // OSGEARTH_CESIUMION_H
