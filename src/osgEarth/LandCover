/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_LAND_COVER_H
#define OSGEARTH_LAND_COVER_H 1

#include <osgEarth/Config>
#include <osgEarth/Layer>
#include <osgEarth/ImageLayer>
#include <vector>

namespace osgEarth
{
    /**
     * A single classification definition of land cover.
     * For example, "forest" or "water".
     * A set of these makes up a land cover dictionary.
     */
    class OSGEARTH_EXPORT LandCoverClass : public osg::Object
    {
    public:
        META_Object(osgEarth, LandCoverClass);

        LandCoverClass();
        LandCoverClass(const Config& conf);
        LandCoverClass(const LandCoverClass& rhs, const osg::CopyOp& op);

        void setValue(int value) { _value = value; }
        int getValue() const { return _value; }

    public:
        void fromConfig(const Config& conf);
        Config getConfig() const;

    private:
        int _value;
    };
    typedef std::vector< osg::ref_ptr<LandCoverClass> > LandCoverClassVector;


    /**
     * Configures a LandCoverDictionary layer.
     */
    class OSGEARTH_EXPORT LandCoverDictionaryOptions : public LayerOptions
    {
    public:
        LandCoverDictionaryOptions(const ConfigOptions& co = ConfigOptions()) :
            LayerOptions(co) { fromConfig(_conf); }
        
        LandCoverClassVector& classes() { return _landCoverClasses; }
        const LandCoverClassVector& classes() const { return _landCoverClasses; }
        
        virtual Config getConfig() const;
        
    protected:
        virtual void mergeConfig(const Config& conf) {
            LayerOptions::mergeConfig(conf);
            fromConfig(conf);
        }
        void fromConfig(const Config& conf);

        
        LandCoverClassVector _landCoverClasses;
    };


    /**
     * A complete set of available land cover classes.
     */
    class OSGEARTH_EXPORT LandCoverDictionary : public Layer
    {
    public:
        META_Layer(osgEarth, LandCoverDictionary, LandCoverDictionaryOptions);

        /** Constructs an empty dictionary */
        LandCoverDictionary();

        /** Constructs a dictionary from serializable options. */
        LandCoverDictionary(const LandCoverDictionaryOptions&);
        
    public:
        LandCoverClassVector& getClasses() { return options().classes(); }
        const LandCoverClassVector& getClasses() const { return _landCoverClasses; }

        const LandCoverClass* getClass(const std::string& name) const;

    private:
        LandCoverClassVector _landCoverClasses;
    };


    /**
     * Maps an integral value from a land cover data source to one of the 
     * land cover classes in the dictionary.
     * For example, 42 --> "tundra".
     */
    class OSGEARTH_EXPORT LandCoverValueMapping : public osg::Object
    {
    public:
        META_Object(osgEarth, LandCoverValueMapping);

        LandCoverValueMapping();
        LandCoverValueMapping(const Config& conf);
        LandCoverValueMapping(const LandCoverValueMapping& rhs, const osg::CopyOp& op);

    public:
        void setValue(int value) { _value = value; }
        int getValue() const { return _value.get(); }

        void setLandCoverClassName(const std::string& name) { _lcClassName = name; }
        const std::string& getLandCoverClassName() const { return _lcClassName.get(); }

        void fromConfig(const Config&);
        Config getConfig() const;

    private:
        optional<int> _value;
        optional<std::string> _lcClassName;
    };
    typedef std::vector< osg::ref_ptr<LandCoverValueMapping> > LandCoverValueMappingVector;


#if 0
    /**
     * Data source for land cover coverage data.
     * Stores the set of mappings from the source's values to the dictionary's 
     * classes.
     */
    class OSGEARTH_EXPORT LandCoverDataSource : public osg::Object
    {
    public:
        META_Object(osgEarth, LandCoverDataSource);

        LandCoverDataSource();
        LandCoverDataSource(const Config& conf);
        LandCoverDataSource(const LandCoverDataSource& rhs, const osg::CopyOp& op =osg::CopyOp::SHALLOW_COPY);

        LandCoverValueMappingVector& getMappings() { return _valueMappings; }
        const LandCoverValueMappingVector& getMappings() const { return _valueMappings; }

        void fromConfig(const Config& conf);
        Config getConfig() const;

    private:
        LandCoverValueMappingVector _valueMappings;
    };
#endif


    class OSGEARTH_EXPORT LandCoverCoverageLayerOptions : public ImageLayerOptions
    {
    public:
        LandCoverCoverageLayerOptions(const ConfigOptions& co = ConfigOptions());

        LandCoverValueMappingVector& mappings() { return _valueMappings; }
        const LandCoverValueMappingVector& mappings() const { return _valueMappings; }

        virtual Config getConfig() const;

    protected:
        void fromConfig(const Config& conf);

        virtual void mergeConfig(const Config& conf) {
            ImageLayerOptions::mergeConfig(conf);
            fromConfig(conf);
        }

    private:
        LandCoverValueMappingVector _valueMappings;
    };

    /**
     * Component coverage layer of a LandCoverLayer.
     * This layer only lives inside a LandCoverLayer - don't add it to a Map directly.
     */
    class OSGEARTH_EXPORT LandCoverCoverageLayer : public ImageLayer
    {
    public:
        META_Layer(osgEarth, LandCoverCoverageLayer, LandCoverCoverageLayerOptions);

        /** Construct an empty land cover coverage layer. */
        LandCoverCoverageLayer();

        /** Deserialize a land cover coverage layer. */
        LandCoverCoverageLayer(const LandCoverCoverageLayerOptions& options);

        //! Code mappings.
        LandCoverValueMappingVector& getMappings() { return options().mappings(); }
        const LandCoverValueMappingVector& getMappings() const { return options().mappings(); }

        //! Land cover dictionary to use.
        void setDictionary(LandCoverDictionary* value) { _lcDictionary = value; }
        LandCoverDictionary* getDictionary() const { return _lcDictionary.get(); }

    private:
        osg::ref_ptr<LandCoverDictionary> _lcDictionary;
    };

} // namespace osgEarth

#endif // OSGEARTH_LAND_COVER_H
