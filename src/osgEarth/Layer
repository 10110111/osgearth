/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_LAYER_H
#define OSGEARTH_LAYER_H 1

#include <osgEarth/Common>
#include <osgEarth/Config>
#include <osgEarth/Status>
#include <osg/StateSet>
#include <osg/RenderInfo>
#include <osgDB/Options>
#include <vector>

namespace osgEarth
{
    class SequenceControl;

    /**
     * Base class for all Map layers. 
     */
    class OSGEARTH_EXPORT Layer : public osg::Referenced
    {
    public:
        Layer();

        /** dtor */
        virtual ~Layer() { }

        /** Gets this layer's unique ID. */
        UID getUID() const { return _uid; }

        /** Layer name */
        virtual void setName(const std::string& name) { _name = name; }
        virtual const std::string& getName() const { return _name; }

        /**
         * Open a layer and return the status.
         */
        virtual const Status& open() { return _status; }

        /**
         * Gets the status of this layer.
         */
        virtual const Status& getStatus() const { return _status; }

        /**
         * Sequence controller if the layer has one.
         */
        virtual SequenceControl* getSequenceControl() { return 0L; }

        /**
         * Returns a Config object serializing this layer, if applicable.
         */
        virtual Config getConfig() const { return Config("layer"); }




        // *** NOTE *** Everything below this line is subject to change ***

        /**
         * Access the layer's stateset, creating it is necessary
         */
        osg::StateSet* getOrCreateStateSet() {
            if (!_stateSet.valid())
                _stateSet = new osg::StateSet();
            return _stateSet.get();
        }

        /**
         * Layer's stateset, or NULL if none exists
         */
        osg::StateSet* getStateSet() const {
            return _stateSet.get();
        }

        /**
         * Sets a new stateset on this layer
         */
        void setStateSet(osg::StateSet* stateSet) {
            _stateSet = stateSet;
        }

        /**
         * How to use this layer when rendering terrain tiles.
         */
        enum RenderType
        {
            RENDERTYPE_NONE,     // do not render this layer directly
            RENDERTYPE_COLOR,    // render this layer as colored terrain tiles
            RENDERTYPE_PATCH,    // render this layer indirectly with a geometry patch
            RENDERTYPE_GL        // render this layer with custom OpenGL code
        };

        RenderType getRenderType() const { return _renderType; }

        void setRenderType(RenderType value) { _renderType = value; }

        struct DrawCallback : public osg::Referenced
        {
            virtual void draw(osg::RenderInfo&) =0;
        };

        void setDrawCallback(DrawCallback* value) { _drawCallback = value; }

        DrawCallback* getDrawCallback() { return _drawCallback.get(); }

        void setPatchLOD(unsigned lod) { _patchLOD = lod; }

        unsigned getPatchLOD() const { return _patchLOD; }

    private:
        UID _uid;
        osg::ref_ptr<osg::StateSet> _stateSet;
        RenderType _renderType;
        Status _status;
        osg::ref_ptr<DrawCallback> _drawCallback;
        std::string _name;
        unsigned _patchLOD;
    };

    typedef std::vector< osg::ref_ptr<Layer> > LayerVector;

} // namespace osgEarth

#endif // OSGEARTH_IMAGE_TERRAIN_LAYER_H
