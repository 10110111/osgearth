/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_LAYER_H
#define OSGEARTH_LAYER_H 1

#include <osgEarth/Common>
#include <osgEarth/Config>
#include <osgEarth/Status>
#include <osgEarth/TileKey>
#include <osg/BoundingBox>
#include <osg/StateSet>
#include <osg/RenderInfo>
#include <osgDB/Options>
#include <osgDB/FileNameUtils>
#include <osgDB/Registry>
#include <vector>

namespace osgEarth
{
    class SequenceControl;

    /**
     * Base class for all Map layers. 
     */
    class OSGEARTH_EXPORT Layer : public osg::Object
    {
    public:
        META_Object(osgEarth, Layer);

        Layer();

        /** Gets this layer's unique ID. */
        UID getUID() const { return _uid; }

        /** Layer name */
        virtual void setName(const std::string& name) { _name = name; }
        virtual const std::string& getName() const { return _name; }

        /**
         * Open a layer and return the status.
         */
        virtual const Status& open() { return _status; }

        /**
         * Gets the status of this layer.
         */
        virtual const Status& getStatus() const { return _status; }

        /**
         * Sequence controller if the layer has one.
         */
        virtual SequenceControl* getSequenceControl() { return 0L; }

        /**
         * Returns a Config object serializing this layer, if applicable.
         */
        virtual Config getConfig() const { return Config(); }

        /**
         * Whether the layer is enabled.
         */
        virtual bool getEnabled() const { return true; }




        // *** NOTE *** Everything below this line is subject to change ***

        /**
         * Access the layer's stateset, creating it is necessary
         */
        osg::StateSet* getOrCreateStateSet() {
            if (!_stateSet.valid())
                _stateSet = new osg::StateSet();
            return _stateSet.get();
        }

        /**
         * Layer's stateset, or NULL if none exists
         */
        osg::StateSet* getStateSet() const {
            return _stateSet.get();
        }

        /**
         * Sets a new stateset on this layer
         */
        void setStateSet(osg::StateSet* stateSet) {
            _stateSet = stateSet;
        }

        /**
         * How (and if) to use this layer when rendering terrain tiles.
         */
        enum RenderType
        {
            // Layer does not require its own terrain rendering pass (model layers, elevation layers)
            RENDERTYPE_NONE, 

            // Layer requires a terrain rendering pass that draws terrain tile geometry
            RENDERTYPE_TILE,

            // Layer requires a terrain rendering pass that emits terrian patches or
            // invokes a custom drawing function
            RENDERTYPE_PATCH
        };

        RenderType getRenderType() const { return _renderType; }

        void setRenderType(RenderType value) { _renderType = value; }

        virtual void modifyTileBoundingBox(const TileKey& key, osg::BoundingBox& box) const { }

    public: // Loading a layer from a plugin

        static Layer* create(const std::string& name, const ConfigOptions& options);

        static const ConfigOptions& getConfigOptions(const osgDB::Options*);

    protected:

        /** dtor */
        virtual ~Layer();

        Layer(const Layer& rhs, const osg::CopyOp& op) { }

        const Status& setStatus(const Status& status) { _status = status; return _status; }

    private:
        UID _uid;
        osg::ref_ptr<osg::StateSet> _stateSet;
        RenderType _renderType;
        Status _status;
        std::string _name;
    };

    typedef std::vector< osg::ref_ptr<Layer> > LayerVector;





    // TODO: move this somewhere generic
    template<class T>
    class RegisterPluginLoader
    {
        public:
            RegisterPluginLoader(const std::string& name)
            {
                if (osgDB::Registry::instance())
                {
                    _rw = new T(name);
                    osgDB::Registry::instance()->addReaderWriter(_rw.get());
                }
            }

            ~RegisterPluginLoader()
            {
                if (osgDB::Registry::instance())
                {
                    osgDB::Registry::instance()->removeReaderWriter(_rw.get());
                }
            }

            T* get() { return _rw.get(); }

        protected:
            osg::ref_ptr<T> _rw;
    };

    // TODO: move this somewhere generic
    template<typename T, typename U>
    class PluginLoader : public osgDB::ReaderWriter
    {
    public: // Plugin stuff
        PluginLoader(const std::string& name) {
            supportsExtension( name, name );
        }

        virtual ~PluginLoader() { }

        ReadResult readObject(const std::string& filename, const osgDB::Options* dbOptions) const
        {
          if ( !acceptsExtension(osgDB::getLowerCaseFileExtension(filename)) )
                return ReadResult::FILE_NOT_HANDLED;

          return ReadResult( new T(U::getConfigOptions(dbOptions)) );
        }
    };
    
#define REGISTER_OSGEARTH_LAYER(NAME,CLASS) \
    extern "C" void osgdb_##NAME(void) {} \
    static osgEarth::RegisterPluginLoader< osgEarth::PluginLoader<CLASS, osgEarth::Layer> > g_proxy_##CLASS_##NAME( #NAME );

} // namespace osgEarth

#endif // OSGEARTH_IMAGE_TERRAIN_LAYER_H
