/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_FEATURES_FEATURE_MODEL_LAYER
#define OSGEARTH_FEATURES_FEATURE_MODEL_LAYER 1

#include <osgEarthFeatures/Common>
#include <osgEarthFeatures/FeatureSource>
#include <osgEarthFeatures/FeatureSourceLayer>
#include <osgEarthFeatures/FeatureDisplayLayout>
#include <osgEarthFeatures/FeatureSourceIndexNode>
#include <osgEarthSymbology/Style>
#include <osgEarth/Layer>
#include <osgEarth/LayerListener>
#include <osgEarth/FadeEffect>

namespace osgEarth { namespace Features
{
    using namespace osgEarth;

    /**
     * Serializable options to configure a FeatureModelLayerOptions.
     */
    class OSGEARTHFEATURES_EXPORT FeatureModelLayerOptions : public LayerOptions
    {
    public:
        // constructor
        FeatureModelLayerOptions(const ConfigOptions& co = ConfigOptions()) :
            LayerOptions(co)
        {
            mergeConfig(_conf);
        }        
        
        /** Name of the feature source layer to use for flattening. */
        optional<std::string>& featureSourceLayer() { return _featureSourceLayer; }
        const optional<std::string>& featureSourceLayer() const { return _featureSourceLayer; }

        osg::ref_ptr<StyleSheet>& styles() { return _styles; }
        const osg::ref_ptr<StyleSheet>& styles() const { return _styles; }

        /** Maximum span of a generated edge, in degrees. For geocentric maps only */
        optional<double>& maxGranularity() { return _maxGranularity_deg; }
        const optional<double>& maxGranularity() const { return _maxGranularity_deg; }

        /** Whether to explicity set/clear GL lighting on the result */
        optional<bool>& enableLighting() { return _lit; }
        const optional<bool>& enableLighting() const { return _lit; }

        /** Information that controls paging and tiling of the dataset */
        optional<FeatureDisplayLayout>& layout() { return _layout; }
        const optional<FeatureDisplayLayout>& layout() const { return _layout; }

        optional<bool>& clusterCulling() { return _clusterCulling; }
        const optional<bool>& clusterCulling() const { return _clusterCulling; }

        /** Expression that will assign a node name to geometry built from each feature.
            Note; this may disable various scene graph optimizations. */
        optional<StringExpression>& featureName() { return _featureNameExpr; }
        const optional<StringExpression>& featureName() const { return _featureNameExpr; }

        /** Whether to index feature data for use with the global ObjectIndex (default = yes)
            for the purposes of search, picking, etc. */
        optional<FeatureSourceIndexOptions>& featureIndexing() { return _featureIndexing; }
        const optional<FeatureSourceIndexOptions>& featureIndexing() const { return _featureIndexing; }

        /** Whether to activate backface culling (default = yes) */
        optional<bool>& backfaceCulling() { return _backfaceCulling; }
        const optional<bool>& backfaceCulling() const { return _backfaceCulling; }

        /** Whether to activate alpha blending (default = yes) */
        optional<bool>& alphaBlending() { return _alphaBlending; }
        const optional<bool>& alphaBlending() const { return _alphaBlending; }

        /** Explicity caching policy for data from the underlying feature source */
        optional<CachePolicy>& cachePolicy() { return _cachePolicy; }
        const optional<CachePolicy>& cachePolicy() const { return _cachePolicy; }

        /** Fading properties */
        optional<FadeOptions>& fading() { return _fading; }
        const optional<FadeOptions>& fading() const { return _fading; }

        /** Whether to enable caching of actual OSG nodes. default = false. */
        optional<bool>& nodeCaching() { return _nodeCaching; }
        const optional<bool>& nodeCaching() const { return _nodeCaching; }

        /** Debug: whether to enable a session-wide resource cache (default=true) */
        optional<bool>& sessionWideResourceCache() { return _sessionWideResourceCache; }
        const optional<bool>& sessionWideResourceCache() const { return _sessionWideResourceCache; }

    public:
        virtual Config getConfig() const;

    protected:
        virtual void mergeConfig(const Config& conf) {
            LayerOptions::mergeConfig(conf);
            fromConfig(conf);
        }
        
    private:
        void fromConfig(const Config& conf);

        optional<std::string>               _featureSourceLayer;
        optional<FeatureDisplayLayout>      _layout;
        optional<StringExpression>          _featureNameExpr;
        optional<bool>                      _lit;
        optional<double>                    _maxGranularity_deg;
        optional<bool>                      _clusterCulling;
        optional<bool>                      _backfaceCulling;
        optional<bool>                      _alphaBlending;
        optional<CachePolicy>               _cachePolicy;
        optional<FadeOptions>               _fading;
        optional<FeatureSourceIndexOptions> _featureIndexing;
        optional<bool>                      _sessionWideResourceCache;
        optional<std::string>               _featureSourceLayer;
        optional<bool>                      _nodeCaching;
        osg::ref_ptr<StyleSheet>            _styles;
    };


    /**
     * Layer that creates a scene graph from feature data and symbology.
     */
    class OSGEARTHFEATURES_EXPORT FeatureModelLayer : public Layer
    {
    public:
        // Create a layer with initial options.
        FeatureModelLayer(const FeatureModelLayerOptions& options);

        // Options used to initialize this layer.
        const FeatureModelLayerOptions& getFeatureModelLayerOptions() const { return *_options; }

        // Feature source layer from which to get a feature source
        bool setFeatureSourceLayer(FeatureSourceLayer* layer);
        
        // the feature source from which to read flattening geometry
        void setFeatureSource(FeatureSource* fs);

    public: // Layer

        // opens the layer and returns the status
        virtual const Status& open();

        // called by the map when this layer is added
        virtual void addedToMap(const class Map*);

        // called by the map when this layer is removed
        virtual void removedFromMap(const class Map*);

    protected:

        virtual ~FeatureModelLayer();

    private:
        // options support.
        FeatureModelLayerOptions* _options;
        FeatureModelLayerOptions  _optionsConcrete;
        const FeatureModelLayerOptions& options() const { return *_options; }
        FeatureModelLayerOptions& mutableOptions() { return *_options;  }

    private:
        osg::ref_ptr<FeatureSource> _featureSource;
        LayerListener<FeatureModelLayer, FeatureSourceLayer> _featureSourceLayerListener;
        osg::ref_ptr<class FeatureModelGraph> _fmg;
    };

} } // namespace osgEarth::Features

#endif // OSGEARTH_FEATURES_FEATURE_MODEL_LAYER
