/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTHUTIL_MGRS_GRATICLE
#define OSGEARTHUTIL_MGRS_GRATICLE

#include <osgEarthUtil/UTMGraticule>

namespace osgEarth { namespace Util
{
    using namespace osgEarth;
    using namespace osgEarth::Symbology;

    /**
     * Configuration options for the geodetic graticule.
     */
    class MGRSGraticuleOptions : public ConfigOptions
    {
    public:
        MGRSGraticuleOptions(const Config& conf = Config()) : ConfigOptions(conf) {
            mergeConfig(_conf);
        }

        /** dtor */
        virtual ~MGRSGraticuleOptions() { }

        /** Style for top level grid zones */
        optional<Style>& primaryStyle() { return _primaryStyle; }
        const optional<Style>& primaryStyle() const { return _primaryStyle; }

        /** Symbology for SQID lines and text */
        optional<Style>& secondaryStyle() { return _secondaryStyle; }
        const optional<Style>& secondaryStyle() const { return _secondaryStyle; }

    public:
        Config getConfig() const {
            Config conf = newConfig();
            conf.key() = "mgrs_graticule";
            return conf;
        }

    protected:

        void mergeConfig(const Config& conf) {
            //todo
        }

        optional<Style> _primaryStyle;
        optional<Style> _secondaryStyle;
    };


    /**
     * Implements a MGRS (Military Grid Reference System) map graticule. 
     * 
     * NOTE: So far, this only works for geocentric maps.
     * TODO: Add projected support; add text label support
     */
    class OSGEARTHUTIL_EXPORT MGRSGraticule : public osg::Group,
                                              public MapNodeObserver,
                                              public MGRSGraticuleOptions
    {
    public:

        /**
         * Constructs a new graticule for use with the specified map.
         *
         * @param map
         *      Map with which you will use this graticule
         * @param options
         *      Optional "options" that configure the graticule. Defaults will be used
         *      if you don't specify this.
         */
        MGRSGraticule(MapNode* mapNode, const MGRSGraticuleOptions& options);
        
        /**
         * Constructs a new MGRS graticule for use with the specified map
         * using default options.
         *
         * @param map
         *      Map with which you will use this graticule
         */
        MGRSGraticule(MapNode* mapNode);

        /**
         * If the change any of the options, call this to rebuild the graticule.
         */
        void dirtyOptions();


    public: // MapNodeObserver
        
        virtual void setMapNode( MapNode* mapNode );

        virtual MapNode* getMapNode() { return _mapNode.get(); }


    protected:

        /** dtor */
        virtual ~MGRSGraticule() { }


    private:

        osg::Node* buildSQIDTiles( const std::string& gzd );

        osg::Group* buildGZDChildren( osg::Group* node, const std::string& gzd );
        
        GeoExtent getExtent( const std::string& gzd, const std::string& sqid );

        friend class MGRSGraticuleFactory;

        void applyDefaultStyles();

        /** one-time initialization called by each constructor */
        void ctor();

        /** called whenever we need to reconstruct the graticule's graph */
        void rebuild();

        osg::observer_ptr<MapNode> _mapNode;

        UID _uid;

        osg::ref_ptr<const Profile> _profile;

        osg::ref_ptr<FeatureProfile> _featureProfile;

        osg::ref_ptr<osg::ClipPlane> _clipPlane;

        osg::Group* _root;

        UTMData _utmData;
    };

} } // namespace osgEarth::Util

#endif // OSGEARTHUTIL_UTM_GRATICLE
