/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_BUNDLEREADER_H
#define OSGEARTH_BUNDLEREADER_H 1

#include <fstream>
#include <vector>
#include <sstream>

#include <osgDB/FileNameUtils>
#include <osgDB/FileUtils>

#include <osgEarth/Notify>
#include <osgEarth/StringUtils>
#include <osgEarth/ImageUtils>
#include <osgEarth/TileKey>

using namespace osgEarth;

#define INDEX_HEADER_SIZE 16
#define INDEX_SIZE 5

namespace
{
    unsigned int  computeOffset(const std::vector<char>& buffer) {
        unsigned int sum = 0;
        for (unsigned int i = 0; i < buffer.size(); i++) {
            char v = buffer[i];
            sum += ((unsigned int)v & 0xff) * pow(2, 8 * i);
        }
        return sum;
    }

    unsigned int hexFromString(const std::string& input)
    {
        unsigned int result;
        std::stringstream ss;
        ss << std::hex << input;
        ss >> result;
        return result;
    }

    std::string toHex(unsigned int value)
    {
        std::stringstream ss;
        ss << std::hex << value;
        return ss.str();
    }
}


class BundleReader
{
public:
    BundleReader(const std::string& bundleFile):
        _bundleFile(bundleFile),
        _lod(0),
        _colOffset(0),
        _rowOffset(0)
    {
        init();
    }

    void init()
    {

        std::string base = osgDB::getNameLessExtension(_bundleFile);
        OSG_NOTICE << "No extension" << base << std::endl;
        _indexFile = base + ".bundlx";
        OSG_NOTICE << "indexFile=" << _indexFile << std::endl;

        // Open the bundle
        _in.open(_bundleFile.c_str(), std::ofstream::binary);

        // Read the index
        readIndex(_indexFile, _index);

        std::string baseName = osgDB::getSimpleFileName(base);
        OE_NOTICE << "Basename=" << baseName << std::endl;

        _rowOffset = hexFromString(baseName.substr(1, 4));
        _colOffset = hexFromString(baseName.substr(6, 4));

        std::cout << "row=" << _rowOffset << ", col=" << _colOffset << std::endl;

        std::string path = osgDB::getFilePath(_bundleFile);

        std::string levelDir = osgDB::getSimpleFileName(path);
        _lod = as<unsigned int>(levelDir.substr(1,2), 0);
        OSG_NOTICE << "Level=" << _lod << std::endl;
    }

    /**
    * Reads the index of a bundle file.
    */
    void readIndex(const std::string& filename, std::vector<int>& index)
    {
        std::ifstream input(filename.c_str(), std::ifstream::binary);
        char header[INDEX_HEADER_SIZE];
        input.read(header, INDEX_HEADER_SIZE);
        while (input.good()) {
            std::vector<char> buffer;
            buffer.resize(5);
            if (input.read(&buffer[0], INDEX_SIZE))
            {
                int offset = computeOffset(buffer);
                index.push_back(offset);
            }
        }
    }

    osg::Image* readImage(const TileKey& key)
    {
        //unsigned int row = floor(float(i) / _bundleDim);
        //unsigned int x = colOffset + row;
        //unsigned int y = rowOffset + i - (row * _bundleDim);

        // Figure out the index for the tilekey
        unsigned int row = key.getTileX() - _colOffset;
        unsigned int i = key.getTileY() - _rowOffset + (row * 128);
        OE_NOTICE << "Index=" << i << std::endl;
        return readImage(i);
    }

    osg::Image* readImage(unsigned int index)
    {        
        if (index < 0 || index > _index.size()) return 0;

        _in.seekg(_index[index], std::ios::beg);
        std::vector<char> sizeBuffer;
        sizeBuffer.resize(4);
        _in.read(&sizeBuffer[0], 4);
        int size = computeOffset(sizeBuffer);
        if (size > 0)
        {
            OSG_NOTICE << "Size=" << size << std::endl;

            std::string image;
            image.resize(size);
            _in.read(&image[0], size);            
            std::stringstream ss(image);            
            return ImageUtils::readStream(ss, 0);
            

            /*
            char* image = new char[size];            
            _in.read(image, size);
            std::stringstream outName;
            outName << index << ".png";
            std::ofstream out(outName.str().c_str(), std::ofstream::binary);
            out.write(image, size);
            delete[] image;
            */
        }

        return 0;
    }

protected:
    std::string _bundleFile;
    std::string _indexFile;

    std::ifstream _in;

    std::vector< int > _index;

    unsigned int _lod;
    unsigned int _rowOffset;
    unsigned int _colOffset;
};



#endif // OSGEARTH_BUNDLEREADER_H

